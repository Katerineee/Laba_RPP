// Паралельне множення матриць з використанням MPI

#include <mpi.h>    // Бібліотека для роботи з MPI
#include <cstdio>   // Ввід/вивід (printf, scanf)
#include <cstdlib>  // Для rand(), malloc()
#include <ctime>    // Для time()

int ProcNum;      // Загальна кількість процесів
int ProcRank;     // Ранг (ідентифікатор) поточного процесу

// Функція для виведення матриці на екран
void PrintMatrix(double* mat, int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j)
            printf("%7.2f ", mat[i * cols + j]);
        printf("\n");
    }
}

// Ініціалізація: вводиться розмір, створюються матриці
void ProcessInitialization(double*& A, double*& B, double*& C,
                           double*& localA, double*& localC,
                           int& size, int& rowsPerProc) {
    if (ProcRank == 0) {
        do {
            printf("Введіть розмір квадратної матриці: ");
            scanf("%d", &size);
            if (size < ProcNum || size % ProcNum != 0)
                printf("Розмір повинен бути кратний кількості процесів (%d)\n", ProcNum);
        } while (size < ProcNum || size % ProcNum != 0);
    }

    MPI_Bcast(&size, 1, MPI_INT, 0, MPI_COMM_WORLD); // Розсилка розміру

    rowsPerProc = size / ProcNum; // Скільки рядків отримає кожен процес

    // Виділення памʼяті
    B       = new double[size * size];
    C       = new double[size * size];
    localA  = new double[rowsPerProc * size];
    localC  = new double[rowsPerProc * size];

    if (ProcRank == 0) {
        A = new double[size * size];
        srand(unsigned(time(nullptr))); // ініціалізація генератора випадкових чисел
        for (int i = 0; i < size; ++i)
            for (int j = 0; j < size; ++j) {
                A[i * size + j] = rand() % 10; // значення від 0 до 9
                B[i * size + j] = rand() % 10;
            }
    }
}

// Розподіл матриць між процесами
void DataDistribution(double* A, double* B,
                      double* localA, int size, int rowsPerProc) {
    MPI_Bcast(B, size * size, MPI_DOUBLE, 0, MPI_COMM_WORLD); // Передача B всім
    MPI_Scatter(A, rowsPerProc * size, MPI_DOUBLE,
                localA, rowsPerProc * size, MPI_DOUBLE,
                0, MPI_COMM_WORLD); // Розподіл рядків A
}

// Локальне множення частини A на B
void ParallelMatrixMultiplication(double* localA, double* B,
                                  double* localC, int size, int rowsPerProc) {
    for (int i = 0; i < rowsPerProc; ++i) {
        for (int j = 0; j < size; ++j) {
            localC[i * size + j] = 0.0;
            for (int k = 0; k < size; ++k)
                localC[i * size + j] += localA[i * size + k] * B[k * size + j];
        }
    }
}

// Збір результатів з усіх процесів
void ResultCollection(double* localC, double* C, int size, int rowsPerProc) {
    MPI_Gather(localC, rowsPerProc * size, MPI_DOUBLE,
               C,       rowsPerProc * size, MPI_DOUBLE,
               0, MPI_COMM_WORLD);
}

// Звільнення памʼяті
void ProcessTermination(double* A, double* B, double* C,
                        double* localA, double* localC) {
    if (ProcRank == 0) delete[] A;
    delete[] B;
    delete[] C;
    delete[] localA;
    delete[] localC;
}

// Головна функція
int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);                        // Ініціалізація MPI
    MPI_Comm_size(MPI_COMM_WORLD, &ProcNum);       // Отримати кількість процесів
    MPI_Comm_rank(MPI_COMM_WORLD, &ProcRank);      // Отримати ранг процесу

    if (ProcRank == 0)
        printf("MPI Паралельне множення матриць\n");

    double *A = nullptr, *B = nullptr, *C = nullptr;
    double *localA = nullptr, *localC = nullptr;
    int size, rowsPerProc;
    double startTime, endTime, totalTime;

    startTime = MPI_Wtime(); // Початок таймера

    ProcessInitialization(A, B, C, localA, localC, size, rowsPerProc);
    DataDistribution(A, B, localA, size, rowsPerProc);
    ParallelMatrixMultiplication(localA, B, localC, size, rowsPerProc);
    ResultCollection(localC, C, size, rowsPerProc);

    endTime = MPI_Wtime(); // Кінець таймера
    totalTime = endTime - startTime;

    if (ProcRank == 0) {
        printf("Матриця A:\n");
        PrintMatrix(A, size, size);
        printf("Матриця B:\n");
        PrintMatrix(B, size, size);
        printf("Матриця A * B = C:\n");
        PrintMatrix(C, size, size);
        printf("Час виконання: %f секунд\n", totalTime);
    }

    ProcessTermination(A, B, C, localA, localC); // Очищення памʼяті
    MPI_Finalize(); // Завершення роботи MPI
    return 0;
}
