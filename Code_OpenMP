// Підключаємо стандартну бібліотеку для введення-виведення через консоль
#include <iostream>

// Підключаємо бібліотеку для використання векторів (динамічних масивів)
#include <vector>

// Підключаємо бібліотеку OpenMP для можливості паралельного виконання коду
#include <omp.h>

// Використовуємо простір імен std, щоб не писати std:: перед кожним cout, vector і т.д.
using namespace std;

// Оголошення констант
const int N = 1000;          // Розмірність квадратної матриці N×N
const int num_blocks = 2; // Кількість блоків на сторону (ділимо матрицю на блоки)

// Оголошення функції block_multiply:
// приймає дві вхідні матриці A і B (по константному посиланню, щоб не копіювати),
// і змінює третю матрицю C (по посиланню).
void block_multiply(const vector<vector<double>>& A, const vector<vector<double>>& B, vector<vector<double>>& C) {

    // Обчислення розміру одного блоку
    int block_size = N / num_blocks;

    // Паралельна обробка двох вкладених циклів за допомогою директиви OpenMP
    #pragma omp parallel for collapse(2)
    for (int bi = 0; bi < num_blocks; ++bi) {             // Перебір блоків по рядках
        for (int bj = 0; bj < num_blocks; ++bj) {         // Перебір блоків по стовпцях
            for (int i = bi * block_size; i < (bi + 1) * block_size; ++i) {       // Перебір рядків всередині блоку
                for (int j = bj * block_size; j < (bj + 1) * block_size; ++j) {   // Перебір стовпців всередині блоку
                    double sum = 0; // Локальна змінна для накопичення суми при множенні рядка на стовпець
                    for (int k = 0; k < N; ++k) {         // Перебір елементів для обчислення скалярного добутку
                        sum += A[i][k] * B[k][j];         // Додавання добутку елементів A і B
                    }
                    C[i][j] = sum; // Запис обчисленого елемента в матрицю результату C
                }
            }
        }
    }
}

// Початок головної функції програми
int main() {

    // Створення трьох матриць розміром N×N
    vector<vector<double>> A(N, vector<double>(N));  // Матриця A
    vector<vector<double>> B(N, vector<double>(N));  // Матриця B
    vector<vector<double>> C(N, vector<double>(N, 0)); // Матриця C (спочатку заповнена нулями)

    // Ініціалізація генератора випадкових чисел
    srand(time(0));

    // Заповнення матриць A і B випадковими числами від 0 до 9
    for (int i = 0; i < N; ++i) {               // Перебір рядків
        for (int j = 0; j < N; ++j) {            // Перебір стовпців
            A[i][j] = rand() % 10;               // Генерація випадкового числа для A
            B[i][j] = rand() % 10;               // Генерація випадкового числа для B
        }
    }

    // Встановлення кількості потоків для OpenMP
    omp_set_num_threads(4); // Наприклад, використовувати 4 потоки

    // Початок вимірювання часу обчислення
    double start_time = omp_get_wtime(); // Запис часу початку

    // Виклик функції для паралельного множення матриць A і B
    block_multiply(A, B, C);

    // Кінець вимірювання часу
    double end_time = omp_get_wtime(); // Запис часу завершення

    // Виведення матриці A на консоль
    cout << "Matrix A:" << endl;
    for (auto& row : A) {                      // Для кожного рядка матриці A
        for (auto& elem : row)                  // Для кожного елемента в рядку
            cout << elem << " ";                // Вивести елемент з пробілом
        cout << endl;                           // Після рядка — перехід на новий рядок
    }

    // Виведення матриці B на консоль
    cout << "Matrix B:" << endl;
    for (auto& row : B) {
        for (auto& elem : row)
            cout << elem << " ";
        cout << endl;
    }

    // Виведення матриці результату C на консоль
    cout << "Matrix C = A * B:" << endl;
    for (auto& row : C) {
        for (auto& elem : row)
            cout << elem << " ";
        cout << endl;
    }

    // Виведення часу виконання обчислення
    cout << "Time elapsed: " << (end_time - start_time) << " seconds" << endl;

    return 0; // Завершення програми
}
